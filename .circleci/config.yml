version: 2.1
orbs:
  gradle: circleci/gradle@2.1.0
  android: circleci/android@1.0
workflows:
  main:
    jobs:
      - deploy:
          filters:
            branches:
              only:
                - setupCircleci
      - test
#
#
jobs:
  deploy:
    working_directory: ~/project
    docker:
      - image: circleci/android:api-29
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASSWORD
    environment:
      JVM_OPTS: -Xmx3200m
    steps:
      - checkout
      - restore_cache:
          key: jars-{{ checksum "build.gradle" }}-{{ checksum  "app/build.gradle" }}
      - run:
          name: Chmod permissions #if permission for Gradlew Dependencies fail, use this.
          command: sudo chmod +x ./gradlew
      - run:
          name: Export Google Services Json
          command: echo 'export GOOGLE_SERVICES_JSON="$GOOGLE_SERVICES_JSON"' >> $BASH_ENV
      - run:
          # Decode the base64 string
          name: Decode Google Services Json
          command: echo $GOOGLE_SERVICES_JSON | base64 -di > app/google-services.json
      - run:
          name: Export Api keys
          command: echo 'export api_keys="$API_KEYS"' >> $BASH_ENV
      - run:
          # Decode the base64 string
          name: Decode Google Services Json
          command: echo $API_KEYS | base64 -di > app/src/main/res/values/api_keys.xml
      - run:
          name: Download Dependencies
          command: ./gradlew androidDependencies
      - save_cache:
          paths:
            - ~/.gradle
          key: jars-{{ checksum "build.gradle" }}-{{ checksum  "app/build.gradle" }}
      - run:
          name: Run Tests
          command: ./gradlew testDebugUnitTest
          # IMPORTANT: allow pipeline to continue to Android Test Report step
      - run:
          name: Save test results
          command: |
            mkdir -p ~/test-results/junit/
            find . -type f -regex ".*/build/reports/test-results/.*xml" -exec cp {} ~/test-results/junit/ \;
          when: always
      - store_test_results:
          path: ~/test-results
      - store_artifacts:
          path: ~/test-results/junit
test:
  pre:
    - emulator -avd circleci-android28 -noaudio -nowindows:
        background: true
        parallel : true
    - circle-android wait-for-boot
    - sleep 30
    - adb shell input keyevent 82
  override:
    - ./gradlew connectedAndroidTest -PdisablePreDex

#jobs:
#  build:
#    working_directory: ~/src
#    docker:
#      - image: circleci/android:api-29
#    environment:
#      JVM_OPTS: -Xmx3200m
#    steps:
#      - checkout
#      - restore_cache:
#          key: jars-{{ checksum "build.gradle" }}-{{ checksum "app/build.gradle" }}
#      - run:
#          name: Chmod permissions
#          command: sudo chmod +x ./gradlew
#          # Export base64 encoded google-services.json
#          # into local bash variables
#      - run :
#          name: Export Google Services Json
#          command: echo 'export GOOGLE_SERVICES_JSON="$GOOGLE_SERVICES_JSON"' >> $BASH_ENV
#      - run:
#          # Decode the base64 string
#          name: Decode Google Services Json
#          command: echo $GOOGLE_SERVICES_JSON | base64 -di > app/google-services.json
#
#      - run:
#          name: Export Api keys
#          command: echo 'export api_keys="$API_KEYS"' >> $BASH_ENV
#      - run:              # Decode the base64 string
#          name: Decode Google Services Json
#          command: echo $API_KEYS | base64 -di > app/src/main/res/values/api_keys.xml
#      - run:
#          name: Download Dependencies
#          command: ./gradlew androidDependencies
#      - save_cache:
#          paths:
#            - ~/.gradle
#          key: jars-{{ checksum "build.gradle" }}-{{ checksum "app/build.gradle" }}
#      - run:
#          name: Run Tests
#          command: ./gradlew lint test
#      - store_artifacts:
#          path: app/build/reports
#          destination: reports
#      - store_test_results:
#          path: app/build/test-results
#      - run:
#          name: Accept licenses
#          command: yes | sdkmanager --licenses || true
#      - run:
#          name: Launch emulator
#          command: export LD_LIBRARY_PATH=${ANDROID_HOME}/emulator/lib64:${ANDROID_HOME}/emulator/lib64/qt/lib && emulator64-arm -avd test -noaudio -no-boot-anim -no-window -accel auto -verbose
#          background: true
#      - run:
#          name: Wait emulator
#          command: |
#            # wait for it to have booted
#            cir - run:
#                name: Setup emulator
#                command: $ANDROID_HOME/tools/bin/sdkmanager "tools" "emulator" "platform-tools" "platforms;android-28" "build-tools;28.0.3" "extras;android;m2repository" "extras;google;m2repository"
#
#      - run:
#          name: Launch emulator
#          command: export LD_LIBRARY_PATH=${ANDROID_HOME}/emulator/lib64:${ANDROID_HOME}/emulator/lib64/qt/lib && emulator64-arm -avd test -noaudio -no-boot-anim -no-window -accel auto -verbose
#          background: true
#      - run:
#          name: Wait emulator
#          command: |
#            # wait for it to have booted
#            circle-android wait-for-boot
#            # unlock the emulator screen
#            sleep 30
#            adb shell input keyevent 82
#      - run:
#          name: Run EspressoTests
#          command: ./gradlew connectedAndroidTest
#      - store_artifacts:
#          path: app/build/reports
#          destination: reports
#      - store_test_results:
#          path: app/build/test-resultscle-android wait-for-boot
#            sleep 30
#            adb shell input keyevent 82
#      - run:
#          name: Run EspressoTests
#          command: ./gradlew connectedAndroidTest
#      - store_artifacts:
#          path: app/build/reports
#          destination: reports
#      - store_test_results:
#          path: app/build/test-resultsjobs:
#  build:
#    working_directory: ~/src
#    docker:
#      - image: circleci/android:api-29
#    environment:
#      JVM_OPTS: -Xmx3200m
#    steps:
#      - checkout
#      - restore_cache:
#          key: jars-{{ checksum "build.gradle" }}-{{ checksum "app/build.gradle" }}
#      - run:
#          name: Chmod permissions
#          command: sudo chmod +x ./gradlew
#          # Export base64 encoded google-services.json
#          # into local bash variables
#      - run :
#          name: Export Google Services Json
#          command: echo 'export GOOGLE_SERVICES_JSON="$GOOGLE_SERVICES_JSON"' >> $BASH_ENV
#      - run:
#          # Decode the base64 string
#          name: Decode Google Services Json
#          command: echo $GOOGLE_SERVICES_JSON | base64 -di > app/google-services.json
#
#      - run:
#          name: Export Api keys
#          command: echo 'export api_keys="$API_KEYS"' >> $BASH_ENV
#      - run:              # Decode the base64 string
#          name: Decode Google Services Json
#          command: echo $API_KEYS | base64 -di > app/src/main/res/values/api_keys.xml
#      - run:
#          name: Download Dependencies
#          command: ./gradlew androidDependencies
#      - save_cache:
#          paths:
#            - ~/.gradle
#          key: jars-{{ checksum "build.gradle" }}-{{ checksum "app/build.gradle" }}
#      - run:
#          name: Run Tests
#          command: ./gradlew lint test
#      - store_artifacts:
#          path: app/build/reports
#          destination: reports
#      - store_test_results:
#          path: app/build/test-results
#      - run:
#          name: Accept licenses
#          command: yes | sdkmanager --licenses || true
#      - run:
#          name: Launch emulator
#          command: export LD_LIBRARY_PATH=${ANDROID_HOME}/emulator/lib64:${ANDROID_HOME}/emulator/lib64/qt/lib && emulator64-arm -avd test -noaudio -no-boot-anim -no-window -accel auto -verbose
#          background: true
#      - run:
#          name: Wait emulator
#          command: |
#            # wait for it to have booted
#            cir - run:
#                name: Setup emulator
#                command: $ANDROID_HOME/tools/bin/sdkmanager "tools" "emulator" "platform-tools" "platforms;android-28" "build-tools;28.0.3" "extras;android;m2repository" "extras;google;m2repository"
#
#      - run:
#          name: Launch emulator
#          command: export LD_LIBRARY_PATH=${ANDROID_HOME}/emulator/lib64:${ANDROID_HOME}/emulator/lib64/qt/lib && emulator64-arm -avd test -noaudio -no-boot-anim -no-window -accel auto -verbose
#          background: true
#      - run:
#          name: Wait emulator
#          command: |
#            # wait for it to have booted
#            circle-android wait-for-boot
#            # unlock the emulator screen
#            sleep 30
#            adb shell input keyevent 82
#      - run:
#          name: Run EspressoTests
#          command: ./gradlew connectedAndroidTest
#      - store_artifacts:
#          path: app/build/reports
#          destination: reports
#      - store_test_results:
#          path: app/build/test-resultscle-android wait-for-boot
#            sleep 30
#            adb shell input keyevent 82
#      - run:
#          name: Run EspressoTests
#          command: ./gradlew connectedAndroidTest
#      - store_artifacts:
#          path: app/build/reports
#          destination: reports
#      - store_test_results:
#          path: app/build/test-results