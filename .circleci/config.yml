version: 2.1
reference:
  ## Paths
  gradle_cache_path: &gradle_cache_path
                       gradle_cache-{{ checksum "build.gradle" }}-{{ checksum  "app/build.gradle" }}
  gems_cache_path: &gems_cache_path
                     gems_cache-{{ checksum "Gemfile.lock" }}
  workspace: &workspace
               ~/src

  ## Configurations
  android_config: &android_config
    working_directory: *workspace
    macos:
      xcode: "9.4.0"
    shell: /bin/bash --login -eo pipefail
    environment:
      TERM: dumb
      JVM_OPTS: -Xmx3200m # Look at options

  ## Cache
  restore_gradle_cache: &restore_gradle_cache
    restore_cache:
      key: *gradle_cache_path

  restore_gems_cache: &restore_gems_cache
    restore_cache:
      key: *gems_cache_path

  save_gradle_cache: &save_gradle_cache
    save_cache:
      key: *gradle_cache_path
      paths:
        - ~/.gradle

  save_gems_cache: &save_gems_cache
    save_cache:
      key: *gems_cache_path
      paths:
        - vendor/bundle

  ## Dependencies
  ruby_dependencies: &ruby_dependencies
    run:
      name: Download Ruby Dependencies
      command: bundle check || bundle install --path vendor/bundle

  android_dependencies: &android_dependencies
    run:
      name: Download Android Dependencies
      command: ./gradlew androidDependencies


jobs:
  ui_test:
    <<: *android_config
    steps:
      - checkout
      # Setup Android Variables for Android Emulator
      - run:
          name: Setup environment variables
          command: |
            echo 'export PATH="$PATH:/usr/local/opt/node@8/bin:${HOME}/.yarn/bin:${HOME}/${CIRCLE_PROJECT_REPONAME}/node_modules/.bin:/usr/local/share/android-sdk/tools/bin"' >> $BASH_ENV
            echo 'export ANDROID_HOME="/usr/local/share/android-sdk"' >> $BASH_ENV
            echo 'export ANDROID_SDK_HOME="/usr/local/share/android-sdk"' >> $BASH_ENV
            echo 'export ANDROID_SDK_ROOT="/usr/local/share/android-sdk"' >> $BASH_ENV
            echo 'export QEMU_AUDIO_DRV=none' >> $BASH_ENV
            echo 'export JAVA_HOME=/Library/Java/Home' >> $BASH_ENV
      # Install Android SDK
      - run:
          name: Install Android sdk
          command: |
            HOMEBREW_NO_AUTO_UPDATE=1 brew tap homebrew/cask
            HOMEBREW_NO_AUTO_UPDATE=1 brew cask install android-sdk
      # Install Emulator
      - run:
          name: Install emulator
          command: (yes | sdkmanager "platform-tools" "platforms;android-26" "extras;intel;Hardware_Accelerated_Execution_Manager" "build-tools;26.0.0" "system-images;android-26;default;x86" "emulator" --verbose) || true
      # Gradle and ruby/fastlane dependencies
      - *restore_gradle_cache
      - *android_dependencies
      - *save_gradle_cache

      - *restore_gems_cache
      - *ruby_dependencies
      - *save_gems_cache
      # Start emulator
      - run: avdmanager create avd -n Nexus_5X_API_26_x86 -k "system-images;android-26;default;x86" -d "Nexus 5X"
      - run: osascript ./fastlane/recording_related/dismiss_warning.scpt # Dismisses the same named computer error
      - run:
          name: Run emulator in background
          command: /usr/local/share/android-sdk/tools/emulator @Nexus_5X_API_26_x86 -skin 1080x2066 -memory 2048 -noaudio
          background: true
      # Tests
      - run:
          name: Run Tests
          command: bundle exec fastlane ui_test
          no_output_timeout: 30m
      # Store video and Test results
      - store_artifacts:
          path: /Users/distiller/src/testrecording.mov
      - store_artifacts:
          path: /Users/distiller/src/app/build/reports/androidTests/connected/index.html


workflows:
  version: 2.1
  commit-workflow:
    jobs:
      - ui_test
#version: 2.1
#orbs:
#  gradle: circleci/gradle@2.1.0
#  android: circleci/android@1.0
#  firebase-testlab: freeletics/firebase-testlab@1.1.1
#workflows:
#  main:
#    jobs:
#      - deploy:
#          filters:
#            branches:
#              only:
#                - setupCircleci
#
#
##
##
#jobs:
#  deploy:
#    working_directory: ~/project
#    docker:
#      - image: circleci/android:api-29
#        auth:
#          username: $DOCKER_USER
#          password: $DOCKER_PASSWORD
#    environment:
#      JVM_OPTS: -Xmx3200m
#
#    steps:
#      - checkout
#      - restore_cache:
#          key: jars-{{ checksum "build.gradle" }}-{{ checksum  "app/build.gradle" }}
#      - run:
#          name: Chmod permissions #if permission for Gradlew Dependencies fail, use this.
#          command: sudo chmod +x ./gradlew
#      - run:
#          name: Export Google Services Json
#          command: echo 'export GOOGLE_SERVICES_JSON="$GOOGLE_SERVICES_JSON"' >> $BASH_ENV
#      - run:
#          # Decode the base64 string
#          name: Decode Google Services Json
#          command: echo $GOOGLE_SERVICES_JSON | base64 -di > app/google-services.json
#      - run:
#          name: Export Api keys
#          command: echo 'export api_keys="$API_KEYS"' >> $BASH_ENV
#      - run:
#          # Decode the base64 string
#          name: Decode Google Services Json
#          command: echo $API_KEYS | base64 -di > app/src/main/res/values/api_keys.xml
#      - run:
#          name: Download Dependencies
#          command: ./gradlew androidDependencies
#      - save_cache:
#          paths:
#            - ~/.gradle
#          key: jars-{{ checksum "build.gradle" }}-{{ checksum  "app/build.gradle" }}
#      - run:
#          name: Run Tests
#          command:
#      - store_artifacts:
#          path: app/build/reports
#          destination: reports
#      - store_test_results:
#          path: test-results



#jobs:
#  build:
#    working_directory: ~/src
#    docker:
#      - image: circleci/android:api-29
#    environment:
#      JVM_OPTS: -Xmx3200m
#    steps:
#      - checkout
#      - restore_cache:
#          key: jars-{{ checksum "build.gradle" }}-{{ checksum "app/build.gradle" }}
#      - run:
#          name: Chmod permissions
#          command: sudo chmod +x ./gradlew
#          # Export base64 encoded google-services.json
#          # into local bash variables
#      - run :
#          name: Export Google Services Json
#          command: echo 'export GOOGLE_SERVICES_JSON="$GOOGLE_SERVICES_JSON"' >> $BASH_ENV
#      - run:
#          # Decode the base64 string
#          name: Decode Google Services Json
#          command: echo $GOOGLE_SERVICES_JSON | base64 -di > app/google-services.json
#
#      - run:
#          name: Export Api keys
#          command: echo 'export api_keys="$API_KEYS"' >> $BASH_ENV
#      - run:              # Decode the base64 string
#          name: Decode Google Services Json
#          command: echo $API_KEYS | base64 -di > app/src/main/res/values/api_keys.xml
#      - run:
#          name: Download Dependencies
#          command: ./gradlew androidDependencies
#      - save_cache:
#          paths:
#            - ~/.gradle
#          key: jars-{{ checksum "build.gradle" }}-{{ checksum "app/build.gradle" }}
#      - run:
#          name: Run Tests
#          command: ./gradlew lint test
#      - store_artifacts:
#          path: app/build/reports
#          destination: reports
#      - store_test_results:
#          path: app/build/test-results
#      - run:
#          name: Accept licenses
#          command: yes | sdkmanager --licenses || true
#      - run:
#          name: Launch emulator
#          command: export LD_LIBRARY_PATH=${ANDROID_HOME}/emulator/lib64:${ANDROID_HOME}/emulator/lib64/qt/lib && emulator64-arm -avd test -noaudio -no-boot-anim -no-window -accel auto -verbose
#          background: true
#      - run:
#          name: Wait emulator
#          command: |
#            # wait for it to have booted
#            cir - run:
#                name: Setup emulator
#                command: $ANDROID_HOME/tools/bin/sdkmanager "tools" "emulator" "platform-tools" "platforms;android-28" "build-tools;28.0.3" "extras;android;m2repository" "extras;google;m2repository"
#
#      - run:
#          name: Launch emulator
#          command: export LD_LIBRARY_PATH=${ANDROID_HOME}/emulator/lib64:${ANDROID_HOME}/emulator/lib64/qt/lib && emulator64-arm -avd test -noaudio -no-boot-anim -no-window -accel auto -verbose
#          background: true
#      - run:
#          name: Wait emulator
#          command: |
#            # wait for it to have booted
#            circle-android wait-for-boot
#            # unlock the emulator screen
#            sleep 30
#            adb shell input keyevent 82
#      - run:
#          name: Run EspressoTests
#          command: ./gradlew connectedAndroidTest
#      - store_artifacts:
#          path: app/build/reports
#          destination: reports
#      - store_test_results:
#          path: app/build/test-resultscle-android wait-for-boot
#            sleep 30
#            adb shell input keyevent 82
#      - run:
#          name: Run EspressoTests
#          command: ./gradlew connectedAndroidTest
#      - store_artifacts:
#          path: app/build/reports
#          destination: reports
#      - store_test_results:
#          path: app/build/test-resultsjobs:
#  build:
#    working_directory: ~/src
#    docker:
#      - image: circleci/android:api-29
#    environment:
#      JVM_OPTS: -Xmx3200m
#    steps:
#      - checkout
#      - restore_cache:
#          key: jars-{{ checksum "build.gradle" }}-{{ checksum "app/build.gradle" }}
#      - run:
#          name: Chmod permissions
#          command: sudo chmod +x ./gradlew
#          # Export base64 encoded google-services.json
#          # into local bash variables
#      - run :
#          name: Export Google Services Json
#          command: echo 'export GOOGLE_SERVICES_JSON="$GOOGLE_SERVICES_JSON"' >> $BASH_ENV
#      - run:
#          # Decode the base64 string
#          name: Decode Google Services Json
#          command: echo $GOOGLE_SERVICES_JSON | base64 -di > app/google-services.json
#
#      - run:
#          name: Export Api keys
#          command: echo 'export api_keys="$API_KEYS"' >> $BASH_ENV
#      - run:              # Decode the base64 string
#          name: Decode Google Services Json
#          command: echo $API_KEYS | base64 -di > app/src/main/res/values/api_keys.xml
#      - run:
#          name: Download Dependencies
#          command: ./gradlew androidDependencies
#      - save_cache:
#          paths:
#            - ~/.gradle
#          key: jars-{{ checksum "build.gradle" }}-{{ checksum "app/build.gradle" }}
#      - run:
#          name: Run Tests
#          command: ./gradlew lint test
#      - store_artifacts:
#          path: app/build/reports
#          destination: reports
#      - store_test_results:
#          path: app/build/test-results
#      - run:
#          name: Accept licenses
#          command: yes | sdkmanager --licenses || true
#      - run:
#          name: Launch emulator
#          command: export LD_LIBRARY_PATH=${ANDROID_HOME}/emulator/lib64:${ANDROID_HOME}/emulator/lib64/qt/lib && emulator64-arm -avd test -noaudio -no-boot-anim -no-window -accel auto -verbose
#          background: true
#      - run:
#          name: Wait emulator
#          command: |
#            # wait for it to have booted
#            cir - run:
#                name: Setup emulator
#                command: $ANDROID_HOME/tools/bin/sdkmanager "tools" "emulator" "platform-tools" "platforms;android-28" "build-tools;28.0.3" "extras;android;m2repository" "extras;google;m2repository"
#
#      - run:
#          name: Launch emulator
#          command: export LD_LIBRARY_PATH=${ANDROID_HOME}/emulator/lib64:${ANDROID_HOME}/emulator/lib64/qt/lib && emulator64-arm -avd test -noaudio -no-boot-anim -no-window -accel auto -verbose
#          background: true
#      - run:
#          name: Wait emulator
#          command: |
#            # wait for it to have booted
#            circle-android wait-for-boot
#            # unlock the emulator screen
#            sleep 30
#            adb shell input keyevent 82
#      - run:
#          name: Run EspressoTests
#          command: ./gradlew connectedAndroidTest
#      - store_artifacts:
#          path: app/build/reports
#          destination: reports
#      - store_test_results:
#          path: app/build/test-resultscle-android wait-for-boot
#            sleep 30
#            adb shell input keyevent 82
#      - run:
#          name: Run EspressoTests
#          command: ./gradlew connectedAndroidTest
#      - store_artifacts:
#          path: app/build/reports
#          destination: reports
#      - store_test_results:
#          path: app/build/test-results